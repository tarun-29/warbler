{"ast":null,"code":"import { apiCall } from \"../../services/api\";\nimport { addError } from \"../actions/error\";\nimport { LOAD_MESSAGES, REMOVE_MESSAGES } from \"../actionTypes\";\nexport const loadMessages = messages => ({\n  type: LOAD_MESSAGES,\n  messages\n});\nexport const remove = id => ({\n  type: REMOVE_MESSAGES,\n  id\n});\nexport const removeMessage = (user_id, message_id) => {\n  return dispatch => {\n    return apiCall(\"delete\", `/api/users/${user_id}/messages/${message_id}`).then(() => dispatch(remove(message_id))).catch(err => {\n      addError(err.message);\n    });\n  };\n};\nexport const fetchMessages = () => {\n  return dispatch => {\n    return apiCall(\"GET\", \"/api/messages\").then(response => {\n      dispatch(loadMessages(response));\n    }).catch(err => {\n      dispatch(addError(err.message));\n    });\n  };\n};\nexport const postNewMessage = text => (dispatch, getState) => {\n  let _getState = getState(),\n      currentUser = _getState.currentUser;\n\n  const id = currentUser.user.id;\n  return apiCall(\"post\", `/api/users/${id}/messages`, {\n    text\n  }).then(res => {// res=>{}\n  }).catch(e => {\n    dispatch(addError(e.message));\n  });\n};","map":{"version":3,"sources":["/Users/tarunkantiwal/Desktop/React/warbler/client/src/store/actions/messages.js"],"names":["apiCall","addError","LOAD_MESSAGES","REMOVE_MESSAGES","loadMessages","messages","type","remove","id","removeMessage","user_id","message_id","dispatch","then","catch","err","message","fetchMessages","response","postNewMessage","text","getState","currentUser","user","res","e"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,gBAA/C;AAEA,OAAO,MAAMC,YAAY,GAAGC,QAAQ,KAAK;AACvCC,EAAAA,IAAI,EAAEJ,aADiC;AAEvCG,EAAAA;AAFuC,CAAL,CAA7B;AAKP,OAAO,MAAME,MAAM,GAAGC,EAAE,KAAK;AAC3BF,EAAAA,IAAI,EAAEH,eADqB;AAE3BK,EAAAA;AAF2B,CAAL,CAAjB;AAKP,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,UAAV,KAAyB;AACpD,SAAOC,QAAQ,IAAI;AACjB,WAAOZ,OAAO,CAAC,QAAD,EAAY,cAAaU,OAAQ,aAAYC,UAAW,EAAxD,CAAP,CACJE,IADI,CACC,MAAMD,QAAQ,CAACL,MAAM,CAACI,UAAD,CAAP,CADf,EAEJG,KAFI,CAEEC,GAAG,IAAI;AACZd,MAAAA,QAAQ,CAACc,GAAG,CAACC,OAAL,CAAR;AACD,KAJI,CAAP;AAKD,GAND;AAOD,CARM;AAUP,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAOL,QAAQ,IAAI;AACjB,WAAOZ,OAAO,CAAC,KAAD,EAAQ,eAAR,CAAP,CACJa,IADI,CACCK,QAAQ,IAAI;AAChBN,MAAAA,QAAQ,CAACR,YAAY,CAACc,QAAD,CAAb,CAAR;AACD,KAHI,EAIJJ,KAJI,CAIEC,GAAG,IAAI;AACZH,MAAAA,QAAQ,CAACX,QAAQ,CAACc,GAAG,CAACC,OAAL,CAAT,CAAR;AACD,KANI,CAAP;AAOD,GARD;AASD,CAVM;AAYP,OAAO,MAAMG,cAAc,GAAGC,IAAI,IAAI,CAACR,QAAD,EAAWS,QAAX,KAAwB;AAAA,kBACtCA,QAAQ,EAD8B;AAAA,MACtDC,WADsD,aACtDA,WADsD;;AAE5D,QAAMd,EAAE,GAAGc,WAAW,CAACC,IAAZ,CAAiBf,EAA5B;AACA,SAAOR,OAAO,CAAC,MAAD,EAAU,cAAaQ,EAAG,WAA1B,EAAsC;AAAEY,IAAAA;AAAF,GAAtC,CAAP,CACJP,IADI,CACCW,GAAG,IAAI,CACX;AACD,GAHI,EAIJV,KAJI,CAIEW,CAAC,IAAI;AACVb,IAAAA,QAAQ,CAACX,QAAQ,CAACwB,CAAC,CAACT,OAAH,CAAT,CAAR;AACD,GANI,CAAP;AAOD,CAVM","sourcesContent":["import { apiCall } from \"../../services/api\";\nimport { addError } from \"../actions/error\";\nimport { LOAD_MESSAGES, REMOVE_MESSAGES } from \"../actionTypes\";\n\nexport const loadMessages = messages => ({\n  type: LOAD_MESSAGES,\n  messages\n});\n\nexport const remove = id => ({\n  type: REMOVE_MESSAGES,\n  id\n});\n\nexport const removeMessage = (user_id, message_id) => {\n  return dispatch => {\n    return apiCall(\"delete\", `/api/users/${user_id}/messages/${message_id}`)\n      .then(() => dispatch(remove(message_id)))\n      .catch(err => {\n        addError(err.message);\n      });\n  };\n};\n\nexport const fetchMessages = () => {\n  return dispatch => {\n    return apiCall(\"GET\", \"/api/messages\")\n      .then(response => {\n        dispatch(loadMessages(response));\n      })\n      .catch(err => {\n        dispatch(addError(err.message));\n      });\n  };\n};\n\nexport const postNewMessage = text => (dispatch, getState) => {\n  let { currentUser } = getState();\n  const id = currentUser.user.id;\n  return apiCall(\"post\", `/api/users/${id}/messages`, { text })\n    .then(res => {\n      // res=>{}\n    })\n    .catch(e => {\n      dispatch(addError(e.message));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}